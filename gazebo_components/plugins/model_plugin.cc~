#include <gazebo/transport/transport.hh>
#include <gazebo/msgs/msgs.hh>
#include <gazebo/gazebo.hh>
#include <boost/bind.hpp>
#include <gazebo/gazebo.hh>
#include <gazebo/physics/physics.hh>
#include <gazebo/common/common.hh>
#include <stdio.h>
#include <iostream>
#include <gazebo/msgs/msgs.hh>
#include <gazebo/transport/transport.hh>
#include <iostream>

namespace gazebo
{
  class ModelPush : public ModelPlugin
  {
    public: void Load(physics::ModelPtr _parent, sdf::ElementPtr /*_sdf*/)
    {
      // Store the pointer to the model
      this->model = _parent;
      model_id = this->model->GetId();
      this->model_name = this->model->GetName();
      if(this->model_name.at(0) == '1'){
        this->k1 = 29.6637;
        this->k2 = 237.1708; 
        this->max_command = 10.0; 
      }
      else if(this->model_name.at(0) == '2'){
        this->k1 = 25.3865;
        this->k2 = 237.1708;
        this->max_command = 10.0;
      } 
      else{
        this->k1 = 23.5092;
        this->k2 = 237.0660;
        this->max_command = 10;
      }
      this->old_sim_time = 0.0;
      this->old_force_x = 0.0;
      this->old_force_y = 0.0;
      this->cumulative_error_x = 0.0;
      this-> cumulative_error_y = 0.0;
      // Listen to the update event. This event is broadcast every
      // simulation iteration.
      this->updateConnection = event::Events::ConnectWorldUpdateBegin(
          boost::bind(&ModelPush::OnUpdate, this, _1));

 

     this->receiver= transport::NodePtr(new transport::Node());
     this->receiver->Init( this->model->GetWorld()->GetName() );
     this->sub = this->receiver->Subscribe("~/ref_velocities", &ModelPush::cb, this);
     }
  
    // Called by the world update start event
    public: void OnUpdate(const common::UpdateInfo & /*_info*/)  /// burada her update de ref_velocities ile alinan hiz setpoint i LQR ile uygulanacak
    {
     float sim_time =  this->model->GetWorld()->GetSimTime().Float();
     float sampling_period = sim_time - this->old_sim_time;
     position = this->model->GetLink("link")->GetWorldCoGPose();
     velocity = this->model->GetLink("link")->GetWorldCoGLinearVel();
     float velocity_err_x = -ref_vel_north + velocity.x;
     float velocity_err_y = -ref_vel_east  + velocity.y;

    // if(this->old_velocity_err_x * velocity_err_x < 0)  //hata bilesenin yonu degistiyse state feedback ten diger yonde biriken hata gitmesin
       //this->cumulative_error_x = 0;
    // if(this->old_velocity_err_y * velocity_err_y < 0)
       //this->cumulative_error_y = 0;


    if((abs(this->old_force_x) < this->max_command) || (velocity_err_x * this->old_force_x > 0))  // eger komut sature olduysa daha fazla integrali sisirmeyelim
       this->cumulative_error_x += velocity_err_x * sampling_period;
     if((abs(this->old_force_y) < this->max_command) || (velocity_err_y * this->old_force_y > 0))
       this->cumulative_error_y += velocity_err_y * sampling_period;

     
     double force_x = -cumulative_error_x * this->k2 - velocity.x * this->k1;
     double force_y = -cumulative_error_y * this->k2 - velocity.y * this->k1;
     
     this->model->GetLink("link")->AddForceAtRelativePosition(math::Vector3(force_x,force_y,0), math::Vector3(0,0,0));
     //this->model->SetLinearVel(math::Vector3(this->ref_vel_north,this->ref_vel_east,0));
     this->old_sim_time = sim_time;
     this->old_force_x = (float)(force_x);
     this->old_force_y = (float)(force_y);
     this->old_velocity_err_x = velocity_err_x;
     this->old_velocity_err_y = velocity_err_y;
    }    

    // Pointer to the model
    private: physics::ModelPtr model;
    private: math::Pose position;
    private: math::Vector3 force;
    private: math::Vector3 velocity;
    private: math::Vector3 accel;
    private: math::Vector3 velocity_body;
    private: math::Vector3 euler_angles;
    //private: physics::LinkPtr  link_ptr;
    private: double DCM[3][3];
    private: double counter ;
    private: double flag    ;
    private: double roll ;
    private: double pitch;
    private: double yaw  ;
    private: double ref_vel_north;
    private: double ref_vel_east ;
    
    //LQR variables
    private: float old_sim_time;
    private: float old_force_x;
    private: float old_force_y;
    private: float old_velocity_err_x;
    private: float old_velocity_err_y;
    private: float cumulative_error_x;
    private: float cumulative_error_y;
    private: float max_command;
    private: double k1;
    private: double k2;
    //LQR variables

        // Pointer to the update event connection
    private: event::ConnectionPtr updateConnection;
    private: transport::SubscriberPtr sub ;
    private: transport::NodePtr receiver;
    private: unsigned int model_id;
    private: std::string model_name;



    public: void cb(ConstPosePtr &_msg)
    {
      if(_msg->orientation().w() == model_id){
        //std::cout << _msg->orientation().z();    //dump model id to monitor
        this->ref_vel_north = _msg->orientation().x();
        this->ref_vel_east  = _msg->orientation().y();
      }
    }

  };
  // Register this plugin with the simulator
  GZ_REGISTER_MODEL_PLUGIN(ModelPush)
}
